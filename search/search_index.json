{"config":{"lang":["ru"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PyMax - Python wrapper \u0434\u043b\u044f API \u043c\u0435\u0441\u0441\u0435\u043d\u0434\u0436\u0435\u0440\u0430 Max","text":"<p>\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0438 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0430\u0432\u043e\u043c\u0430\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0432 \u043c\u0435\u0441\u0441\u0435\u043d\u0434\u0436\u0435\u0440\u0435 Max.</p>"},{"location":"#_1","title":"\u0411\u044b\u0441\u0442\u0440\u044b\u0439 \u0441\u0442\u0430\u0440\u0442","text":"<pre><code>import asyncio\nfrom pymax import MaxClient\n\nasync def main():\n    client = MaxClient(phone=\"+79001234567\")\n\n    @client.on_message\n    async def handle_message(message):\n        await client.send_message(\n            chat_id=message.chat_id,\n            text=f\"\u041f\u0440\u0438\u0432\u0435\u0442, {message.author.username}! {message.text}\"\n        )\n\n    await client.start()\n\nasyncio.run(main())\n</code></pre>"},{"location":"#_2","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430","text":"<pre><code># \u0447\u0435\u0440\u0435\u0437 pip\npip install -U maxapi-python\n# \u0438\u043b\u0438 uv\nuv add -U maxapi-python\n</code></pre>"},{"location":"#_3","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f","text":"<ul> <li>API Reference - \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u0432</li> <li>\u041f\u0440\u0438\u043c\u0435\u0440\u044b - \u0433\u043e\u0442\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0431\u043e\u0442\u043e\u0432</li> </ul>"},{"location":"#_4","title":"\u0421\u0441\u044b\u043b\u043a\u0438","text":"<ul> <li>GitHub</li> <li>PyPI</li> <li>Issues</li> </ul>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#maxclient","title":"MaxClient","text":""},{"location":"api/#pymax.MaxClient","title":"<code>pymax.MaxClient(phone: str, uri: str = Constants.WEBSOCKET_URI.value, work_dir: str = '.', logger: logging.Logger | None = None)</code>","text":"<p>\u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 WebSocket API \u0441\u0435\u0440\u0432\u0438\u0441\u0430 Max.</p> <p>Parameters:</p> Name Type Description Default <code>phone</code> <code>str</code> <p>\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438.</p> required <code>uri</code> <code>str</code> <p>URI WebSocket \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e Constants.WEBSOCKET_URI.value.</p> <code>WEBSOCKET_URI.value</code> <code>work_dir</code> <code>str</code> <p>\u0420\u0430\u0431\u043e\u0447\u0430\u044f \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \".\".</p> <code>'.'</code> <code>logger</code> <code>Logger | None</code> <p>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u043b\u043e\u0433\u0433\u0435\u0440. \u0415\u0441\u043b\u0438 \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u043d \u2014 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043b\u043e\u0433\u0433\u0435\u0440 \u043c\u043e\u0434\u0443\u043b\u044f \u0441 \u0438\u043c\u0435\u043d\u0435\u043c f\"{name}.MaxClient\".</p> <code>None</code> <p>Raises:</p> Type Description <code>InvalidPhoneError</code> <p>\u0415\u0441\u043b\u0438 \u0444\u043e\u0440\u043c\u0430\u0442 \u043d\u043e\u043c\u0435\u0440\u0430 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0439.</p> Source code in <code>src\\pymax\\core.py</code> <pre><code>def __init__(\n    self,\n    phone: str,\n    uri: str = Constants.WEBSOCKET_URI.value,\n    work_dir: str = \".\",\n    logger: logging.Logger | None = None,\n) -&gt; None:\n    self.uri: str = uri\n    self.is_connected: bool = False\n    self.phone: str = phone\n    self.chats: list[Chat] = []\n    self.dialogs: list[Dialog] = []\n    self.channels: list[Channel] = []\n    self._users: dict[int, User] = {}\n    if not self._check_phone():\n        raise InvalidPhoneError(self.phone)\n    self._work_dir: str = work_dir\n    self._database_path: Path = Path(work_dir) / \"session.db\"\n    self._database_path.parent.mkdir(parents=True, exist_ok=True)\n    self._database_path.touch(exist_ok=True)\n    self._database = Database(self._work_dir)\n    self._ws: websockets.ClientConnection | None = None\n    self._seq: int = 0\n    self._pending: dict[int, asyncio.Future[dict[str, Any]]] = {}\n    self._recv_task: asyncio.Task[Any] | None = None\n    self._incoming: asyncio.Queue[dict[str, Any]] | None = None\n    self._device_id = self._database.get_device_id()\n    self._token = self._database.get_auth_token()\n    self.user_agent = Constants.DEFAULT_USER_AGENT.value\n    self._on_message_handler: Callable[[Message], Any] | None = None\n    self._on_start_handler: Callable[[], Any | Awaitable[Any]] | None = None\n    self._background_tasks: set[asyncio.Task[Any]] = set()\n    self.logger = logger or logging.getLogger(f\"{__name__}.MaxClient\")\n    self._setup_logger()\n\n    self.logger.debug(\"Initialized MaxClient uri=%s work_dir=%s\", self.uri, self._work_dir)\n</code></pre>"},{"location":"api/#pymax.MaxClient-functions","title":"Functions","text":""},{"location":"api/#pymax.MaxClient.on_message","title":"<code>on_message(handler: Callable[[Message], Any | Awaitable[Any]]) -&gt; Callable[[Message], Any | Awaitable[Any]]</code>","text":"<p>\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>Callable[[Message], Any | Awaitable[Any]]</code> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0438\u043b\u0438 coroutine, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0430\u044f \u043e\u0431\u044a\u0435\u043a\u0442 Message.</p> required <p>Returns:</p> Type Description <code>Callable[[Message], Any | Awaitable[Any]]</code> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a.</p> Source code in <code>src\\pymax\\core.py</code> <pre><code>def on_message(\n    self, handler: Callable[[Message], Any | Awaitable[Any]]\n) -&gt; Callable[[Message], Any | Awaitable[Any]]:\n    \"\"\"\n    \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.\n\n    Args:\n        handler: \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0438\u043b\u0438 coroutine, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0430\u044f \u043e\u0431\u044a\u0435\u043a\u0442 Message.\n\n    Returns:\n        \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a.\n    \"\"\"\n    self._on_message_handler = handler\n    self.logger.debug(\"on_message handler set: %r\", handler)\n    return handler\n</code></pre>"},{"location":"api/#pymax.MaxClient.on_start","title":"<code>on_start(handler: Callable[[], Any | Awaitable[Any]]) -&gt; Callable[[], Any | Awaitable[Any]]</code>","text":"<p>\u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>handler</code> <code>Callable[[], Any | Awaitable[Any]]</code> <p>\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0438\u043b\u0438 coroutine \u0431\u0435\u0437 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432.</p> required <p>Returns:</p> Type Description <code>Callable[[], Any | Awaitable[Any]]</code> <p>\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a.</p> Source code in <code>src\\pymax\\core.py</code> <pre><code>def on_start(\n    self, handler: Callable[[], Any | Awaitable[Any]]\n) -&gt; Callable[[], Any | Awaitable[Any]]:\n    \"\"\"\n    \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.\n\n    Args:\n        handler: \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0438\u043b\u0438 coroutine \u0431\u0435\u0437 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432.\n\n    Returns:\n        \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a.\n    \"\"\"\n    self._on_start_handler = handler\n    self.logger.debug(\"on_start handler set: %r\", handler)\n    return handler\n</code></pre>"},{"location":"api/#pymax.MaxClient.send_message","title":"<code>send_message(text: str, chat_id: int, notify: bool) -&gt; Message | None</code>  <code>async</code>","text":"<p>\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0447\u0430\u0442.</p> Source code in <code>src\\pymax\\core.py</code> <pre><code>async def send_message(self, text: str, chat_id: int, notify: bool) -&gt; Message | None:\n    \"\"\"\n    \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0447\u0430\u0442.\n    \"\"\"\n    try:\n        self.logger.info(\"Sending message to chat_id=%s notify=%s\", chat_id, notify)\n        payload = SendMessagePayload(\n            chat_id=chat_id,\n            message=SendMessagePayloadMessage(\n                text=text,\n                cid=int(time.time() * 1000),\n                elements=[],\n                attaches=[],\n            ),\n            notify=notify,\n        ).model_dump(by_alias=True)\n\n        data = await self._send_and_wait(opcode=Opcode.SEND_MESSAGE, payload=payload)\n        if error := data.get(\"payload\", {}).get(\"error\"):\n            self.logger.error(\"Send message error: %s\", error)\n        msg = Message.from_dict(data[\"payload\"][\"message\"]) if data.get(\"payload\") else None\n        self.logger.debug(\"send_message result: %r\", msg)\n        return msg\n    except Exception:\n        self.logger.exception(\"Send message failed\")\n        return None\n</code></pre>"},{"location":"api/#pymax.MaxClient.edit_message","title":"<code>edit_message(chat_id: int, message_id: int, text: str) -&gt; Message | None</code>  <code>async</code>","text":"<p>\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.</p> Source code in <code>src\\pymax\\core.py</code> <pre><code>async def edit_message(self, chat_id: int, message_id: int, text: str) -&gt; Message | None:\n    \"\"\"\n    \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.\n    \"\"\"\n    try:\n        self.logger.info(\"Editing message chat_id=%s message_id=%s\", chat_id, message_id)\n        payload = EditMessagePayload(\n            chat_id=chat_id,\n            message_id=message_id,\n            text=text,\n            elements=[],\n            attaches=[],\n        ).model_dump(by_alias=True)\n        data = await self._send_and_wait(opcode=Opcode.EDIT_MESSAGE, payload=payload)\n        if error := data.get(\"payload\", {}).get(\"error\"):\n            self.logger.error(\"Edit message error: %s\", error)\n        msg = Message.from_dict(data[\"payload\"][\"message\"]) if data.get(\"payload\") else None\n        self.logger.debug(\"edit_message result: %r\", msg)\n        return msg\n    except Exception:\n        self.logger.exception(\"Edit message failed\")\n        return None\n</code></pre>"},{"location":"api/#pymax.MaxClient.delete_message","title":"<code>delete_message(chat_id: int, message_ids: list[int], for_me: bool) -&gt; bool</code>  <code>async</code>","text":"<p>\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.</p> Source code in <code>src\\pymax\\core.py</code> <pre><code>async def delete_message(self, chat_id: int, message_ids: list[int], for_me: bool) -&gt; bool:\n    \"\"\"\n    \u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f.\n    \"\"\"\n    try:\n        self.logger.info(\n            \"Deleting messages chat_id=%s ids=%s for_me=%s\",\n            chat_id,\n            message_ids,\n            for_me,\n        )\n\n        payload = DeleteMessagePayload(\n            chat_id=chat_id, message_ids=message_ids, for_me=for_me\n        ).model_dump(by_alias=True)\n\n        data = await self._send_and_wait(opcode=Opcode.DELETE_MESSAGE, payload=payload)\n        if error := data.get(\"payload\", {}).get(\"error\"):\n            self.logger.error(\"Delete message error: %s\", error)\n            return False\n        self.logger.debug(\"delete_message success\")\n        return True\n    except Exception:\n        self.logger.exception(\"Delete message failed\")\n        return False\n</code></pre>"},{"location":"api/#pymax.MaxClient.get_cached_user","title":"<code>get_cached_user(user_id: int) -&gt; User | None</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u044e\u0437\u0435\u0440\u0430 \u0438\u0437 \u043a\u0435\u0448\u0430 \u043f\u043e \u0435\u0433\u043e ID</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>int</code> <p>ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</p> required <p>Returns:</p> Type Description <code>User | None</code> <p>User | None: \u041e\u0431\u044a\u0435\u043a\u0442 User \u0438\u043b\u0438 None \u043f\u0440\u0438 \u043e\u0448\u0438\u0431\u043a\u0435.</p> Source code in <code>src\\pymax\\core.py</code> <pre><code>def get_cached_user(self, user_id: int) -&gt; User | None:\n    \"\"\"\n    \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u044e\u0437\u0435\u0440\u0430 \u0438\u0437 \u043a\u0435\u0448\u0430 \u043f\u043e \u0435\u0433\u043e ID\n\n    Args:\n        user_id (int): ID \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.\n\n    Returns:\n        User | None: \u041e\u0431\u044a\u0435\u043a\u0442 User \u0438\u043b\u0438 None \u043f\u0440\u0438 \u043e\u0448\u0438\u0431\u043a\u0435.\n    \"\"\"\n    user = self._users.get(user_id)\n    self.logger.debug(\"get_cached_user id=%s hit=%s\", user_id, bool(user))\n    return user\n</code></pre>"},{"location":"api/#pymax.MaxClient.get_users","title":"<code>get_users(user_ids: list[int]) -&gt; list[User]</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445 \u043f\u043e \u0438\u0445 ID (\u0441 \u043a\u0435\u0448\u0435\u043c).</p> Source code in <code>src\\pymax\\core.py</code> <pre><code>async def get_users(self, user_ids: list[int]) -&gt; list[User]:\n    \"\"\"\n    \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445 \u043f\u043e \u0438\u0445 ID (\u0441 \u043a\u0435\u0448\u0435\u043c).\n    \"\"\"\n    self.logger.debug(\"get_users ids=%s\", user_ids)\n    cached = {uid: self._users[uid] for uid in user_ids if uid in self._users}\n    missing_ids = [uid for uid in user_ids if uid not in self._users]\n\n    if missing_ids:\n        self.logger.debug(\"Fetching missing users: %s\", missing_ids)\n        fetched_users = await self.fetch_users(missing_ids)\n        if fetched_users:\n            for user in fetched_users:\n                self._users[user.id] = user\n                cached[user.id] = user\n\n    ordered = [cached[uid] for uid in user_ids if uid in cached]\n    self.logger.debug(\"get_users result_count=%d\", len(ordered))\n    return ordered\n</code></pre>"},{"location":"api/#pymax.MaxClient.get_user","title":"<code>get_user(user_id: int) -&gt; User | None</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u043f\u043e \u0435\u0433\u043e ID (\u0441 \u043a\u0435\u0448\u0435\u043c).</p> Source code in <code>src\\pymax\\core.py</code> <pre><code>async def get_user(self, user_id: int) -&gt; User | None:\n    \"\"\"\n    \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u043f\u043e \u0435\u0433\u043e ID (\u0441 \u043a\u0435\u0448\u0435\u043c).\n    \"\"\"\n    self.logger.debug(\"get_user id=%s\", user_id)\n    if user_id in self._users:\n        return self._users[user_id]\n\n    users = await self.fetch_users([user_id])\n    if users:\n        self._users[user_id] = users[0]\n        return users[0]\n    return None\n</code></pre>"},{"location":"api/#pymax.MaxClient.fetch_users","title":"<code>fetch_users(user_ids: list[int]) -&gt; None | list[User]</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445 \u043f\u043e \u0438\u0445 ID.</p> Source code in <code>src\\pymax\\core.py</code> <pre><code>async def fetch_users(self, user_ids: list[int]) -&gt; None | list[User]:\n    \"\"\"\n    \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u0445 \u043f\u043e \u0438\u0445 ID.\n    \"\"\"\n    try:\n        self.logger.info(\"Fetching users count=%d\", len(user_ids))\n\n        payload = FetchContactsPayload(contact_ids=user_ids).model_dump(by_alias=True)\n\n        data = await self._send_and_wait(opcode=Opcode.GET_CONTACTS_INFO, payload=payload)\n        if error := data.get(\"payload\", {}).get(\"error\"):\n            self.logger.error(\"Fetch users error: %s\", error)\n            return None\n\n        users = [User.from_dict(u) for u in data[\"payload\"].get(\"contacts\", [])]\n        for user in users:\n            self._users[user.id] = user\n\n        self.logger.debug(\"Fetched users: %d\", len(users))\n        return users\n    except Exception:\n        self.logger.exception(\"Fetch users failed\")\n        return []\n</code></pre>"},{"location":"api/#pymax.MaxClient.fetch_history","title":"<code>fetch_history(chat_id: int, from_time: int | None = None, forward: int = 0, backward: int = 200) -&gt; list[Message] | None</code>  <code>async</code>","text":"<p>\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0447\u0430\u0442\u0430.</p> Source code in <code>src\\pymax\\core.py</code> <pre><code>async def fetch_history(\n    self,\n    chat_id: int,\n    from_time: int | None = None,\n    forward: int = 0,\n    backward: int = 200,\n) -&gt; list[Message] | None:\n    \"\"\"\n    \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0441\u0442\u043e\u0440\u0438\u044e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0447\u0430\u0442\u0430.\n    \"\"\"\n    if from_time is None:\n        from_time = int(time.time() * 1000)\n\n    try:\n        self.logger.info(\n            \"Fetching history chat_id=%s from=%s forward=%s backward=%s\",\n            chat_id,\n            from_time,\n            forward,\n            backward,\n        )\n\n        payload = FetchHistoryPayload(\n            chat_id=chat_id,\n            from_time=from_time,  # pyright: ignore[reportCallIssue] FIXME: Pydantic Field alias\n            forward=forward,\n            backward=backward,\n        ).model_dump(by_alias=True)\n\n        self.logger.debug(\"Payload dict keys: %s\", list(payload.keys()))\n\n        data = await self._send_and_wait(\n            opcode=Opcode.FETCH_HISTORY, payload=payload, timeout=10\n        )\n\n        if error := data.get(\"payload\", {}).get(\"error\"):\n            self.logger.error(\"Fetch history error: %s\", error)\n            return None\n\n        messages = [Message.from_dict(msg) for msg in data[\"payload\"].get(\"messages\", [])]\n        self.logger.debug(\"History fetched: %d messages\", len(messages))\n        return messages\n    except Exception:\n        self.logger.exception(\"Fetch history failed\")\n        return None\n</code></pre>"},{"location":"api/#pymax.MaxClient.start","title":"<code>start() -&gt; None</code>  <code>async</code>","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a WebSocket, \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0443\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e) \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0444\u043e\u043d\u043e\u0432\u044b\u0439 \u0446\u0438\u043a\u043b.</p> Source code in <code>src\\pymax\\core.py</code> <pre><code>async def start(self) -&gt; None:\n    \"\"\"\n    \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a WebSocket, \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0443\u0435\u0442\n    \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u0435\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u043e) \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0444\u043e\u043d\u043e\u0432\u044b\u0439 \u0446\u0438\u043a\u043b.\n    \"\"\"\n    try:\n        self.logger.info(\"Client starting\")\n        await self._connect(self.user_agent)\n        if self._token is None:\n            await self._login()\n        else:\n            await self._sync()\n\n        if self._on_start_handler:\n            self.logger.debug(\"Calling on_start handler\")\n            result = self._on_start_handler()\n            if asyncio.iscoroutine(result):\n                await result\n\n        if self._ws:\n            ping_task = asyncio.create_task(self._send_interactive_ping())\n            self._background_tasks.add(ping_task)\n            ping_task.add_done_callback(\n                lambda t: self._background_tasks.discard(t) or self._log_task_exception(t)\n            )\n\n            try:\n                await self._ws.wait_closed()\n            except asyncio.CancelledError:\n                self.logger.debug(\"wait_closed cancelled\")\n    except Exception:\n        self.logger.exception(\"Client start failed\")\n</code></pre>"},{"location":"api/#_1","title":"\u0422\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445","text":""},{"location":"api/#message","title":"Message","text":""},{"location":"api/#pymax.Message","title":"<code>pymax.Message(sender: int | None, elements: list[Element] | None, reaction_info: dict[str, Any] | None, options: int | None, id: int, time: int, text: str, status: MessageStatus | str | None, type: MessageType | str, attaches: list[Any])</code>","text":"Source code in <code>src\\pymax\\types.py</code> <pre><code>def __init__(\n    self,\n    sender: int | None,\n    elements: list[Element] | None,\n    reaction_info: dict[str, Any] | None,\n    options: int | None,\n    id: int,\n    time: int,\n    text: str,\n    status: MessageStatus | str | None,\n    type: MessageType | str,\n    attaches: list[Any],\n) -&gt; None:\n    self.sender = sender\n    self.elements = elements\n    self.options = options\n    self.id = id\n    self.time = time\n    self.text = text\n    self.type = type\n    self.attaches = attaches\n    self.status = status\n    self.reactionInfo = reaction_info\n</code></pre>"},{"location":"api/#user","title":"User","text":""},{"location":"api/#pymax.User","title":"<code>pymax.User(account_status: int, update_time: int, id: int, names: list[Names], options: list[str] | None = None, base_url: str | None = None, base_raw_url: str | None = None, photo_id: int | None = None, description: str | None = None, gender: int | None = None, link: str | None = None, web_app: str | None = None, menu_button: dict[str, Any] | None = None)</code>","text":"Source code in <code>src\\pymax\\types.py</code> <pre><code>def __init__(\n    self,\n    account_status: int,\n    update_time: int,\n    id: int,\n    names: list[Names],\n    options: list[str] | None = None,\n    base_url: str | None = None,\n    base_raw_url: str | None = None,\n    photo_id: int | None = None,\n    description: str | None = None,\n    gender: int | None = None,\n    link: str | None = None,\n    web_app: str | None = None,\n    menu_button: dict[str, Any] | None = None,\n) -&gt; None:\n    self.account_status = account_status\n    self.update_time = update_time\n    self.id = id\n    self.names = names\n    self.options = options or []\n    self.base_url = base_url\n    self.base_raw_url = base_raw_url\n    self.photo_id = photo_id\n    self.description = description\n    self.gender = gender\n    self.link = link\n    self.web_app = web_app\n    self.menu_button = menu_button\n</code></pre>"},{"location":"api/#chat","title":"Chat","text":""},{"location":"api/#pymax.Chat","title":"<code>pymax.Chat(participants_count: int, access: AccessType | str, invited_by: int | None, link: str | None, chat_type: ChatType | str, title: str | None, last_fire_delayed_error_time: int, last_delayed_update_time: int, options: dict[str, bool], base_raw_icon_url: str | None, base_icon_url: str | None, description: str | None, modified: int, id_: int, admin_participants: dict[int, dict[Any, Any]], participants: dict[int, int], owner: int, join_time: int, created: int, last_message: Message | None, prev_message_id: str | None, last_event_time: int, messages_count: int, admins: list[int], restrictions: int | None, status: str, cid: int)</code>","text":"Source code in <code>src\\pymax\\types.py</code> <pre><code>def __init__(\n    self,\n    participants_count: int,\n    access: AccessType | str,\n    invited_by: int | None,\n    link: str | None,\n    chat_type: ChatType | str,\n    title: str | None,\n    last_fire_delayed_error_time: int,\n    last_delayed_update_time: int,\n    options: dict[str, bool],\n    base_raw_icon_url: str | None,\n    base_icon_url: str | None,\n    description: str | None,\n    modified: int,\n    id_: int,\n    admin_participants: dict[int, dict[Any, Any]],\n    participants: dict[int, int],\n    owner: int,\n    join_time: int,\n    created: int,\n    last_message: Message | None,\n    prev_message_id: str | None,\n    last_event_time: int,\n    messages_count: int,\n    admins: list[int],\n    restrictions: int | None,\n    status: str,\n    cid: int,\n) -&gt; None:\n    self.participants_count = participants_count\n    self.access = access\n    self.invited_by = invited_by\n    self.link = link\n    self.type = chat_type\n    self.title = title\n    self.last_fire_delayed_error_time = last_fire_delayed_error_time\n    self.last_delayed_update_time = last_delayed_update_time\n    self.options = options\n    self.base_raw_icon_url = base_raw_icon_url\n    self.base_icon_url = base_icon_url\n    self.description = description\n    self.modified = modified\n    self.id = id_\n    self.admin_participants = admin_participants\n    self.participants = participants\n    self.owner = owner\n    self.join_time = join_time\n    self.created = created\n    self.last_message = last_message\n    self.prev_message_id = prev_message_id\n    self.last_event_time = last_event_time\n    self.messages_count = messages_count\n    self.admins = admins\n    self.restrictions = restrictions\n    self.status = status\n    self.cid = cid\n</code></pre>"},{"location":"api/#dialog","title":"Dialog","text":""},{"location":"api/#pymax.Dialog","title":"<code>pymax.Dialog(cid: int | None, owner: int, has_bots: bool | None, join_time: int, created: int, last_message: Message | None, type: ChatType | str, last_fire_delayed_error_time: int, last_delayed_update_time: int, prev_message_id: str | None, options: dict[str, bool], modified: int, last_event_time: int, id: int, status: str, participants: dict[str, int])</code>","text":"Source code in <code>src\\pymax\\types.py</code> <pre><code>def __init__(\n    self,\n    cid: int | None,\n    owner: int,\n    has_bots: bool | None,\n    join_time: int,\n    created: int,\n    last_message: Message | None,\n    type: ChatType | str,\n    last_fire_delayed_error_time: int,\n    last_delayed_update_time: int,\n    prev_message_id: str | None,\n    options: dict[str, bool],\n    modified: int,\n    last_event_time: int,\n    id: int,\n    status: str,\n    participants: dict[str, int],\n) -&gt; None:\n    self.cid = cid\n    self.owner = owner\n    self.has_bots = has_bots\n    self.join_time = join_time\n    self.created = created\n    self.last_message = last_message\n    self.type = type\n    self.last_fire_delayed_error_time = last_fire_delayed_error_time\n    self.last_delayed_update_time = last_delayed_update_time\n    self.prev_message_id = prev_message_id\n    self.options = options\n    self.modified = modified\n    self.last_event_time = last_event_time\n    self.id = id\n    self.status = status\n    self.participants = participants\n</code></pre>"},{"location":"api/#channel","title":"Channel","text":""},{"location":"api/#pymax.Channel","title":"<code>pymax.Channel(participants_count: int, access: AccessType | str, invited_by: int | None, link: str | None, chat_type: ChatType | str, title: str | None, last_fire_delayed_error_time: int, last_delayed_update_time: int, options: dict[str, bool], base_raw_icon_url: str | None, base_icon_url: str | None, description: str | None, modified: int, id_: int, admin_participants: dict[int, dict[Any, Any]], participants: dict[int, int], owner: int, join_time: int, created: int, last_message: Message | None, prev_message_id: str | None, last_event_time: int, messages_count: int, admins: list[int], restrictions: int | None, status: str, cid: int)</code>","text":"<p>               Bases: <code>Chat</code></p> Source code in <code>src\\pymax\\types.py</code> <pre><code>def __init__(\n    self,\n    participants_count: int,\n    access: AccessType | str,\n    invited_by: int | None,\n    link: str | None,\n    chat_type: ChatType | str,\n    title: str | None,\n    last_fire_delayed_error_time: int,\n    last_delayed_update_time: int,\n    options: dict[str, bool],\n    base_raw_icon_url: str | None,\n    base_icon_url: str | None,\n    description: str | None,\n    modified: int,\n    id_: int,\n    admin_participants: dict[int, dict[Any, Any]],\n    participants: dict[int, int],\n    owner: int,\n    join_time: int,\n    created: int,\n    last_message: Message | None,\n    prev_message_id: str | None,\n    last_event_time: int,\n    messages_count: int,\n    admins: list[int],\n    restrictions: int | None,\n    status: str,\n    cid: int,\n) -&gt; None:\n    self.participants_count = participants_count\n    self.access = access\n    self.invited_by = invited_by\n    self.link = link\n    self.type = chat_type\n    self.title = title\n    self.last_fire_delayed_error_time = last_fire_delayed_error_time\n    self.last_delayed_update_time = last_delayed_update_time\n    self.options = options\n    self.base_raw_icon_url = base_raw_icon_url\n    self.base_icon_url = base_icon_url\n    self.description = description\n    self.modified = modified\n    self.id = id_\n    self.admin_participants = admin_participants\n    self.participants = participants\n    self.owner = owner\n    self.join_time = join_time\n    self.created = created\n    self.last_message = last_message\n    self.prev_message_id = prev_message_id\n    self.last_event_time = last_event_time\n    self.messages_count = messages_count\n    self.admins = admins\n    self.restrictions = restrictions\n    self.status = status\n    self.cid = cid\n</code></pre>"},{"location":"api/#element","title":"Element","text":""},{"location":"api/#pymax.Element","title":"<code>pymax.Element(type: ElementType | str, length: int, from_: int | None = None)</code>","text":"Source code in <code>src\\pymax\\types.py</code> <pre><code>def __init__(\n    self, type: ElementType | str, length: int, from_: int | None = None\n) -&gt; None:\n    self.type = type\n    self.length = length\n    self.from_ = from_\n</code></pre>"},{"location":"api/#_2","title":"\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f","text":""},{"location":"api/#invalidphoneerror","title":"InvalidPhoneError","text":""},{"location":"api/#pymax.InvalidPhoneError","title":"<code>pymax.InvalidPhoneError(phone: str)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0435 \u043f\u0440\u0438 \u043d\u0435\u0432\u0435\u0440\u043d\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430.</p> <p>Parameters:</p> Name Type Description Default <code>phone</code> <code>str</code> <p>\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430.</p> required Source code in <code>src\\pymax\\exceptions.py</code> <pre><code>def __init__(self, phone: str) -&gt; None:\n    super().__init__(f\"Invalid phone number format: {phone}\")\n</code></pre>"},{"location":"api/#websocketnotconnectederror","title":"WebSocketNotConnectedError","text":""},{"location":"api/#pymax.WebSocketNotConnectedError","title":"<code>pymax.WebSocketNotConnectedError()</code>","text":"<p>               Bases: <code>Exception</code></p> <p>\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435, \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u043e\u0435 \u043f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u043a WebSocket, \u0435\u0441\u043b\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043d\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e.</p> Source code in <code>src\\pymax\\exceptions.py</code> <pre><code>def __init__(self) -&gt; None:\n    super().__init__(\"WebSocket is not connected\")\n</code></pre>"},{"location":"api/#_3","title":"\u041a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b","text":""},{"location":"api/#messagetype","title":"MessageType","text":""},{"location":"api/#pymax.MessageType","title":"<code>pymax.MessageType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"api/#messagestatus","title":"MessageStatus","text":""},{"location":"api/#pymax.MessageStatus","title":"<code>pymax.MessageStatus</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"api/#chattype","title":"ChatType","text":""},{"location":"api/#pymax.ChatType","title":"<code>pymax.ChatType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"api/#authtype","title":"AuthType","text":""},{"location":"api/#pymax.AuthType","title":"<code>pymax.AuthType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"api/#accesstype","title":"AccessType","text":""},{"location":"api/#pymax.AccessType","title":"<code>pymax.AccessType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"api/#devicetype","title":"DeviceType","text":""},{"location":"api/#pymax.DeviceType","title":"<code>pymax.DeviceType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"api/#elementtype","title":"ElementType","text":""},{"location":"api/#pymax.ElementType","title":"<code>pymax.ElementType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"api/#opcode","title":"Opcode","text":""},{"location":"api/#pymax.Opcode","title":"<code>pymax.Opcode</code>","text":"<p>               Bases: <code>IntEnum</code></p>"},{"location":"examples/","title":"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"examples/#-","title":"\u041f\u0440\u043e\u0441\u0442\u043e\u0439 \u044d\u0445\u043e-\u0431\u043e\u0442","text":"<pre><code>import asyncio\nfrom pymax import MaxClient\n\nasync def main():\n    client = MaxClient(phone=\"+79001234567\")\n\n    @client.on_message\n    async def echo_handler(message):\n        await client.send_message(\n            chat_id=message.chat_id,\n            text=f\"\u042d\u0445\u043e: {message.text}\"\n        )\n\n    await client.start()\n\nasyncio.run(main())\n</code></pre>"},{"location":"examples/#_2","title":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043e\u0442\u0432\u0435\u0442\u044b","text":"<pre><code>import asyncio\nfrom pymax import MaxClient\n\nasync def main():\n    client = MaxClient(phone=\"+79001234567\")\n\n    # \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0445 \u0441\u043b\u043e\u0432 \u0438 \u043e\u0442\u0432\u0435\u0442\u043e\u0432\n    auto_replies = {\n        '\u043f\u0440\u0438\u0432\u0435\u0442': '\u041f\u0440\u0438\u0432\u0435\u0442! \u041a\u0430\u043a \u0434\u0435\u043b\u0430?',\n        '\u043f\u043e\u043a\u0430': '\u0414\u043e \u0441\u0432\u0438\u0434\u0430\u043d\u0438\u044f!',\n        '\u0441\u043f\u0430\u0441\u0438\u0431\u043e': '\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430!',\n        '\u0432\u0440\u0435\u043c\u044f': '\u0412\u0440\u0435\u043c\u044f \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u0432\u0430\u0448 \u0432\u043e\u043f\u0440\u043e\u0441!',\n    }\n\n    @client.on_message\n    async def auto_reply_handler(message):\n        text = message.text.lower()\n\n        for keyword, reply in auto_replies.items():\n            if keyword in text:\n                await client.send_message(\n                    chat_id=message.chat_id,\n                    text=reply\n                )\n                break\n\n    await client.start()\n\nasyncio.run(main())\n</code></pre>"},{"location":"examples/#_3","title":"\u041c\u043e\u0434\u0435\u0440\u0430\u0446\u0438\u044f \u0447\u0430\u0442\u0430","text":"<pre><code>import asyncio\nfrom pymax import MaxClient\n\nasync def main():\n    client = MaxClient(phone=\"+79001234567\")\n\n    # \u0417\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043d\u044b\u0435 \u0441\u043b\u043e\u0432\u0430\n    forbidden_words = ['\u0441\u043f\u0430\u043c', '\u0440\u0435\u043a\u043b\u0430\u043c\u0430', '\u0432\u0437\u043b\u043e\u043c']\n\n    @client.on_message\n    async def moderation_handler(message):\n        text = message.text.lower()\n\n        for word in forbidden_words:\n            if word in text:\n                # \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\n                await client.delete_message(\n                    chat_id=message.chat_id,\n                    message_id=message.id\n                )\n\n                # \u041f\u0440\u0435\u0434\u0443\u043f\u0440\u0435\u0436\u0434\u0430\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n                await client.send_message(\n                    chat_id=message.chat_id,\n                    text=f\"@{message.author.username}, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u0430\u043f\u0440\u0435\u0449\u0435\u043d\u043d\u044b\u0445 \u0441\u043b\u043e\u0432 \u043d\u0435\u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u043e!\"\n                )\n                break\n\n    await client.start()\n\nasyncio.run(main())\n</code></pre>"}]}